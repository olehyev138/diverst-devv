# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.
#
#
# Documentation:
# ===============
#
# Usage
#   Use `t('key.subkey...')` excluding the root language key (ex: 'en') in controllers to utilize translation messages
#
#
# Variable Interpolation
#   Define your translation value like this: `translation_key: "Foo %{variable} Bar"`
#   And then you can use it by doing: `t('translation_key', variable: model_instance.value)`
#
#
# Pluralization
#   If the message would be different if pluralized, singular, and/or when it's 0 (optional), you can pass an object as the message instead:
#   Ex. translation_key: {
#         zero: "No messages", # optional
#         one: "One message",
#         other: "%{count} messages"
#       }
#   To pass the count: `t('translation_key', count: N)`
#

en:
  custom_text:
    erg: Group
    program: Goal
    structure: Structure
    outcome: Focus Areas
    badge: Badge
    segment: Segment
    dci_full_title: Engagement
    dci_abbreviation: Engagement
    member_preference: Member Survey
    parent: Parent
    sub_erg: Sub-Group
    privacy_statement: Privacy Statement
  errors:
    not_found: {
      one: "Sorry, the resource you are looking for does not exist.",
      other: "Sorry, the resources you are looking for don't exist."
    }
    timed_out: "Your request timed out. Please try again later."
    invalid_route: "Invalid route"
