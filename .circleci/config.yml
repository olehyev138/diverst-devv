version: 2.1

workflows:
  version: 2.1
  lint-test-deploy:
    jobs:
      - deploy-prod-test:
          context: aws-context
jobs:
  lint:
    working_directory: ~/TeamDiverst/diverst-development
    docker:
      - image: awsdiverst/cci-primary:0.0.3
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    shell: /bin/bash --login
    steps:
      - checkout
      #
      ## Install gems
      #
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - v1-gem-cache-{{ arch }}-{{ .Branch }}-
            - v1-gem-cache-{{ arch }}-
      - run:
          name: Install gems
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3 && bundle clean
      - save_cache:
          key: v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
      #
      ## Install node modules
      #
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
            - v1-node-cache-{{ .Branch }}-
            - v1-node-cache-
      - run:
          name: Install node modules
          command: cd client && npm install
      - save_cache:
          paths:
            - ./client/node_modules
          key: v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
      #
      ## Run Danger.js
      #
      - run:
          name: 'Run Danger'
          command: npx danger ci
      #
      ## Run linter
      #
      - run:
          name: Run linter
          command: |
            export PRONTO_GITHUB_ACCESS_TOKEN=75daf2120af91bae1bf7078de9e33b72d50b04bc
            export PRONTO_PULL_REQUEST_ID=$(git ls-remote -q origin pull\*\head | grep $CIRCLE_SHA1 | sed 's/.*refs\/pull\/\([0-9]*\)\/head/\1/g')
            bundle exec pronto run -f github_status github_pr -c origin/react_update
          no_output_timeout: 60m
  frontend-test:
    working_directory: ~/TeamDiverst/diverst-development/
    parallelism: 2
    docker:
      - image: awsdiverst/cci-primary:0.0.3
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    shell: /bin/bash --login
    environment:
      JEST_JUNIT_OUTPUT_DIR: /tmp/circleci-test-results/junit
      JEST_JUNIT_OUTPUT_NAME: results.xml
      JEST_JUNIT_ADD_FILE_ATTRIBUTE: true
    steps:
      - checkout
      - run:
          name: Create artifact directories
          command: mkdir -p /tmp/circleci-test-results/junit
      #
      ## Install node modules
      #
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
            - v1-node-cache-{{ .Branch }}-
            - v1-node-cache-
      - run:
          name: Install node modules
          command: cd client && npm install
      - save_cache:
          paths:
            - ./client/node_modules
          key: v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
      #
      ## Run frontend tests
      #
      - run:
          name: Run frontend tests
          command: cd client/ && npm test -- $(circleci tests glob "app/**/*.test.*" | circleci tests split --split-by=timings) --ci --runInBand --reporters=default --reporters=jest-junit
      #
      ## Store test results
      #
      - store_test_results:
          path: /tmp/circleci-test-results/junit/
      - store_artifacts:
          path: /tmp/circleci-test-results/junit/
  backend-test:
    working_directory: ~/TeamDiverst/diverst-development
    parallelism: 4
    shell: /bin/bash --login
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results/rspec
    docker:
      - image: awsdiverst/cci-primary:0.0.3
        environment:
          RAILS_ENV: test
          RACK_ENV: test
      - image: circleci/mariadb:10.4.12
    steps:
      - checkout
      - run:
          name: Create artifact directories
          command: mkdir -p $CIRCLE_TEST_REPORTS
      - run:
          name: Set timezone
          working_directory: ~/TeamDiverst/diverst-development
          command: echo ''America/New_York'' | tee -a /etc/timezone
      #
      ## Install gems
      #
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - v1-gem-cache-{{ arch }}-{{ .Branch }}-
            - v1-gem-cache-{{ arch }}-
      - run:
          name: Install gems
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3 && bundle clean
      - save_cache:
          key: v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
      #
      ## Setup database config
      #
      - run:
          name: Configure database
          command: |
            mkdir -p config && echo 'test:
              database: circle_test
              adapter: mysql2
              url: <%= ENV["DATABASE_URL"] %>
              pool: <%= ENV["DB_POOL"] || ENV["MAX_THREADS"] || 20 %>
              encoding: utf8mb4
              collation: utf8mb4_bin
              username: root
              host: 127.0.0.1
            ' > config/database.yml
      - run:
          name: Setup database
          command: bundle exec rake db:create db:schema:load --trace
          environment:
            RAILS_ENV: test
            RACK_ENV: test
      - run:
          name: Migrate database
          command: bundle exec rake db:migrate
      #
      ## Run backend tests
      #
      - run:
          name: Run backend tests
          command: bundle exec rspec --no-color --require spec_helper --format RspecJunitFormatter --out $CIRCLE_TEST_REPORTS/results.xml --format progress -- $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
          environment:
            RAILS_ENV: test
            RACK_ENV: test
      #
      ## Store test results
      #
      - store_test_results:
          path: /tmp/circleci-test-results/rspec/
      - store_artifacts:
          path: /tmp/circleci-test-results/rspec/
  #
  ## Deploy job for testing environment
  #
  deploy-testing:
    working_directory: ~/TeamDiverst/diverst-development/
    docker:
      - image: awsdiverst/cci-primary:0.0.3
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    shell: /bin/bash --login
    steps:
      - checkout
      - run:
          name: Authenticate with AWS
          command: echo $(./devops/scripts/cli-assume-role "$AWS_CLI_ROLE_ARN") > $BASH_ENV
      - run:
          name: Deploy backend
          command: |
            VERSION_LABEL="v${CIRCLE_SHA1:0:8}"
            ./devops/scripts/create-app-version "$AWS_TEST_ENV" "$VERSION_LABEL" "$AWS_MASTER_BUCKET"
            ./devops/scripts/deploy-app-version "$AWS_TEST_ENV" "$VERSION_LABEL"
      #
      ## Install node modules for frontend building
      #
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
            - v1-node-cache-{{ .Branch }}-
            - v1-node-cache-
      - run:
          name: Install node modules
          command: cd client && npm install
      - save_cache:
          paths:
            - ./client/node_modules
          key: v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
      #
      ## Build & deploy frontend
      #
      - run:
          name: Build & deploy frontend
          command: |
            ./devops/scripts/load-client-env testing
            ./devops/scripts/deploy-frontend "$AWS_FRONTEND_BUCKET"

  #
  ## Deploy Analytics service
  #
  deploy-analytics:
    working_directory: ~/TeamDiverst/diverst-development
    # Use machine image so we can run full docker commands
    machine: true
    shell: /bin/bash --login
    steps:
      - checkout
      - run:
          name: Authenticate with AWS
          command: echo $(./devops/scripts/cli-assume-role "$AWS_CLI_ROLE_ARN") > $BASH_ENV
      - run:
          name: Build & install gems for Lambda app
          # Build & install gems in docker container mocking a Lambda env, see docs for details
          command: |
            cd lib/analytics/app
            docker run --rm -i -v "$PWD":/var/task -w /var/task awsdiverst/lambda-env-ruby2.7:0.0.1 bash < install_gems
            ls -la
      # Create deployment package, upload to s3 & deploy to Lambda
      - run:
          name: Deploy Analytics Service
          command: |
            VERSION_LABEL="v${CIRCLE_SHA1:0:8}"
            ./devops/scripts/deploy-analytics "$VERSION_LABEL" "$AWS_MASTER_BUCKET"

  deploy-prod-test:
    working_directory: ~/TeamDiverst/diverst-development/
    docker:
      - image: awsdiverst/cci-primary:0.0.3
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    shell: /bin/bash --login
    steps:
      - checkout
      - run:
          name: 'POC'
          command: echo 'works'
#      - run:
#          name: Authenticate with AWS
#          command: echo $(./devops/scripts/cli-assume-role "$AWS_CLI_ROLE_ARN") > $BASH_ENV
#      - run:
#          name: Deploy backend
#          command: |
#            VERSION_LABEL="v${CIRCLE_SHA1:0:8}"
#            ./devops/scripts/create-app-version "$AWS_TEST_ENV" "$VERSION_LABEL" "$AWS_MASTER_BUCKET"
#            ./devops/scripts/deploy-app-version "$AWS_TEST_ENV" "$VERSION_LABEL"
      #
      ## Install node modules for frontend building
      #
#      - restore_cache:
#          keys:
#            # when lock file changes, use increasingly general patterns to restore cache
#            - v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
#            - v1-node-cache-{{ .Branch }}-
#            - v1-node-cache-
#      - run:
#          name: Install node modules
#          command: cd client && npm install
#      - save_cache:
#          paths:
#            - ./client/node_modules
#          key: v1-node-cache-{{ .Branch }}-{{ checksum "./client/package-lock.json" }}
#      #
      ## Build & deploy frontend
      #
#      - run:
#          name: Build & deploy frontend
#          command: |
#            ./devops/scripts/load-client-env testing
#            ./devops/scripts/deploy-frontend "$AWS_FRONTEND_BUCKET"
#
