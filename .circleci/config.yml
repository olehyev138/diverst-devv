version: 2.1
executors:
  primary-image:
    docker:
      - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
jobs:
  lint:
    working_directory: ~/TeamDiverst/diverst-development
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    executor: primary-image
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ .Branch }}-
            - v1-dep-staging-
            - v1-dep-
      - run: gem install bundler
      - run: 'bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
          --jobs=4 --retry=3'
      - save_cache:
          key: v1-dep-{{ .Branch }}-{{ epoch }}
          paths:
            - vendor/bundle
            - ~/virtualenvs
            - ~/.m2
            - ~/.ivy2
            - ~/.bundle
            - ~/.go_workspace
            - ~/.gradle
            - ~/.cache/bower
            - public/assets
            - ./node_modules
      - run:
          command: |
            export PRONTO_GITHUB_ACCESS_TOKEN=60fc301a32c3a0450eeec2985a1c1a09cefba857
            export PRONTO_PULL_REQUEST_ID=$(git ls-remote -q origin pull\*\head | grep $CIRCLE_SHA1 | sed 's/.*refs\/pull\/\([0-9]*\)\/head/\1/g')
            git fetch origin development:refs/remotes/origin/development
            bundle exec pronto run -f github_status github_pr -c origin/development --exit-code
      - store_artifacts:
          path: /tmp/circleci-artifacts
  test:
    working_directory: ~/TeamDiverst/diverst-development
    parallelism: 2
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    executor: primary-image
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # This is based on your 1.0 configuration file or project settings
    - run:
        working_directory: ~/TeamDiverst/diverst-development
        command: 'echo ''America/New_York'' | sudo tee -a /etc/timezone; sudo dpkg-reconfigure
          -f noninteractive tzdata; sudo service mysql restart; sudo service postgresql
          restart; '
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-staging-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    #- run: gem install bundler
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    - run: export PATH="~/TeamDiverst/diverst-development/node_modules/.bin:$PATH"
    - run: npm install -g yarn
    - run: nvm install 8 && nvm use 8 && yarn
    - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
    - run: sudo rm -rf /etc/apt/sources.list.d/circleci_trusty.list && sudo rm -rf /etc/apt/sources.list.d/github_git-lfs.list  && sudo rm -rf /etc/apt/sources.list.d/neo4j.list && sudo rm -rf /etc/apt/sources.list.d/mysql.list && sudo rm -rf /etc/apt/sources.list.d/basho_riak.list
    - run: gem install bundler
    - run: 'bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
        --jobs=4 --retry=3 '
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        # These cache paths were specified in the 1.0 config
        - public/assets
        - ./node_modules
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: |-
        mkdir -p config && echo 'test:
          database: circle_ruby_test
          adapter: mysql2
          url: <%= ENV["DATABASE_URL"] %>
          pool: <%= ENV["DB_POOL"] || ENV["MAX_THREADS"] || 20 %>
          encoding: utf8mb4
          collation: utf8mb4_bin
          username: ubuntu
          host: localhost
          socket: /var/run/mysqld/mysqld.sock
        ' > config/database.yml
    - run:
        command: bundle exec rake db:create db:schema:load --trace
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: bundle exec rake db:migrate
    - run:
        command: bundle exec rake assets:precompile assets:clean
        environment:
          RAILS_GROUPS: assets
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: mkdir -p $CIRCLE_TEST_REPORTS/rspec
    - run: export TEST_RETRY="true" # Enable Rspec retry
    - run:
        command: bundle exec rspec --color --require spec_helper --format RspecJunitFormatter --out $CIRCLE_TEST_REPORTS/rspec/rspec.xml --format progress -- $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=filesize)
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results

  #  build and test jobs go here
  deploy-testing:
    working_directory: ~/TeamDiverst/diverst-development
    shell: /bin/bash --login
    executor: primary-image
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:55:cb:5c:8e:f2:a4:cc:a8:d0:23:6b:ec:96:dd:70"
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      # Restore the dependency cache
      - restore_cache:
          keys:
          # This branch if available
          - v1-dep-{{ .Branch }}-
          # Default branch if not
          - v1-dep-development-
          # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
          - v1-dep-
      # This is based on your 1.0 configuration file or project settings
      - run: gem update --system
      - run: gem install bundler
      - run: bundle install
      - run:
          name: Deploy to AWS if tests pass and branch is Development
          command: eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa* && cap testing deploy
          
  #  build and test jobs go here
  deploy-staging:
    working_directory: ~/TeamDiverst/diverst-development
    shell: /bin/bash --login
    executor: primary-image
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:55:cb:5c:8e:f2:a4:cc:a8:d0:23:6b:ec:96:dd:70"
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      # Restore the dependency cache
      - restore_cache:
          keys:
          # This branch if available
          - v1-dep-{{ .Branch }}-
          # Default branch if not
          - v1-dep-staging-
          # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
          - v1-dep-
      # This is based on your 1.0 configuration file or project settings
      - run: gem update --system
      - run: gem install bundler
      - run: bundle install
      - run:
          name: Deploy to AWS if tests pass and branch is Staging
          command: eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa* && cap staging deploy

workflows:
  version: 2
  lint-test-deploy:
    jobs:
      - lint
      - test:
          requires:
            - lint
      - deploy-testing:
          requires:
            - test
          filters:
            branches:
              only: development
      - deploy-staging:
          requires:
            - test
          filters:
            branches:
              only: staging
