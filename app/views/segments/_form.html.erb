<div class="content__main">
  <div class="card">
    <%= simple_form_for @segment do |f| %>
      <div class="card__section card__section--border">
        <%= f.input :name,
              label: "Start off by giving your segment a name",
              input_html: { autofocus: true } %>
      </div>

      <div class="card__section card__section--border">
        <p class="field__hint">To be a part of this segment, a user must meet <strong>all</strong> the following criteria</p>
        <div id="rules">
          <%= f.simple_fields_for :rules do |field| %>
            <%= render 'rule_fields', f: field %>
          <% end %>
          <div class="link">
            <%= link_to_add_association "Add a criterion", f, :rules %>
          </div>

          <%= f.button :submit %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<% content_for :page_scripts do %>
  <script>
    var operators = [{
      id: 0,
      name: "equals",
      isMultiSelect: false
    }, {
      id: 1,
      name: "greater than",
      isMultiSelect: false
    }, {
      id: 2,
      name: "lesser than",
      isMultiSelect: false
    }, {
      id: 3,
      name: "is not",
      isMultiSelect: false
    }, {
      id: 4,
      name: "contains any of",
      isMultiSelect: true
    }, {
      id: 5,
      name: "contains all of",
      isMultiSelect: true
    }, {
      id: 6,
      name: "does not contain",
      isMultiSelect: true
    }];

    var makeRuleDynamic = function($ruleEl) {
      var $fieldSelect = $ruleEl.find('.custom-field');
      var $operatorSelect = $ruleEl.find('.operator');
      var $valueText = $ruleEl.find('.value-text');
      var $valueSelect = $ruleEl.find('.value-select');
      var datePicker;

      $valueText.removeAttr('value');
      $valueSelect.removeAttr('value');

      $valueText.attr('name', $valueText.attr('name') + '[]');

      var handleFieldChange = function() {
        $valueSelect.parents('.flex-row__cell').css('display', 'none');
        $valueText.parents('.flex-row__cell').css('display', 'none');

        var fieldOperators = $(this).find(":selected").data('operators') || [];
        $operatorSelect.find('option').remove();

        operators.forEach(function(operator) {
          if (fieldOperators.indexOf(operator.id) > -1) {
            $operatorSelect[0].add(new Option(operator.name, operator.id, true, operator.id === $operatorSelect.data('operator-id')));
          }
        });

        $operatorSelect.parents('.flex-row__cell').css('display', 'inline-block');

        handleOperatorChange();
      };

      // When the field is changed, populate the operators select field with the appropriate operations for the selected field
      $fieldSelect.change(handleFieldChange);

      var handleOperatorChange = function() {
        $valueSelect.parents('.flex-row__cell').css('display', 'none')
        $valueText.parents('.flex-row__cell').css('display', 'none').prop('disabled', true);

        var selectedOperator = operators.filter(function(operator) {
          return operator.id === parseInt($operatorSelect.val());
        })[0];

        var options = $fieldSelect.find(":selected").data('options');

        if (options.length) {
          $valueSelect.find('option').remove();

          var selectedValues = $valueSelect.data('selected-values') || [];

          options.forEach(function(option) {
            $valueSelect[0].add(new Option(option, option, false, selectedValues.indexOf(option) > -1));
          });

          if (selectedOperator.isMultiSelect) {
            $valueSelect.prop('multiple', 'multiple');
            var placeholderText = "Select one or more options";
          }
          else {
            $valueSelect.prop('multiple', '');
            var placeholderText = "Select an option";
          }

          $valueText.prop('disabled', true);
          $valueSelect.prop('disabled', false);

          $valueSelect.parents('.flex-row__cell').css('display', 'inline-block');
          $valueSelect.select2({
            allowClear: true,
            placeholder: placeholderText
          });
        }
        else {
          $valueSelect.prop('disabled', true);
          $valueText.prop('disabled', false);
          $valueText.parents('.flex-row__cell').css('display', 'inline-block');
          $valueText.val('');

          // Add datepicker if field is of type DateField
          var fieldType = $fieldSelect.find(":selected").data('type');

          if (fieldType === 'DateField') {
            if (!datePicker) {
              datePicker = new Pikaday({
                field: $valueText[0],
                yearRange: [1900, new Date().getFullYear()]
              });
            }
          }
          else {
            if (datePicker) datePicker.destroy();
          }
        }
      };

      // When the operator is changed, create the appropriate value field
      $operatorSelect.change(handleOperatorChange);

      // Initial setup
      if ($fieldSelect.find(":selected")[0].innerHTML !== "") {
        handleFieldChange.call($fieldSelect);
        handleOperatorChange.call($operatorSelect);
      }
    };

    // Make each rule form adapt as the user selects different options
    $('#rules').on('cocoon:after-insert', function(e, insertedItem) {
      makeRuleDynamic(insertedItem);
    });

    $('#rules > .nested-fields').each(function() {
      makeRuleDynamic($(this));
    });
  </script>
<% end %>
