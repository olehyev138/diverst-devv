<%= simple_form_for @segment do |f| %>
  <div class="content__header">
    <div class="flex-row flex-row--middle full-width">
      <div class="flex-row__cell">
        <h1><%= f.input :name, label: false, placeholder: 'Name', input_html: { style: "height: 50x; font-size: 18px;" }%></h1>
      </div>
      <div class="flex-row__cell">
        <%= f.button :submit %>
      </div>
      <% unless @segment.new_record? %>
        <div class="flex-row__cell">
          <%= link_to "export targeted members", export_csv_segment_path(@segment, group_id: @group&.id), class: "btn btn--secondary hidden-xs" if current_user.is_admin? %>
        </div>
      <% end %>
      <div class="flex-row__cell">
        <h3>Population: <%= @segment.members.count %></h3>
      </div>
    </div>
  </div>

  <div class="content__main">
    <div class="card">
      <div class="card__section card__section--border">
        <div class="row">
          <div class="col sm-5">
            <%= f.input :active_users_filter %>
          </div>
          <div class="col sm-5 pull-right">
            <%= f.input :limit %>
          </div>
        </div>
      </div>
      <div class="card__section pad-top">
        <div class="flex-row">
          <div class="flex-row__cell">
            <div class="link">
              <%= link_to_add_association "+ Field Rule", f, :field_rules, partial: 'field_rule', id: 'add_field_rule', data: { 'association-insertion-node': "#field-rules", 'association-insertion-method': 'append' } %>
            </div>
          </div>
          <div class="flex-row__cell">
            <div class="link">
              <%= link_to_add_association "+ Order Rule", f, :order_rules, partial: 'order_rule', id: 'add_order_rule', data: { 'association-insertion-node': "#order-rules", 'association-insertion-method': 'append' } %>
            </div>
          </div>
          <div class="flex-row__cell">
            <div class="link">
              <%= link_to_add_association "+ Scope Rule", f, :group_rules, partial: 'group_rule', id: 'add_group_rule', data: { 'association-insertion-node': "#group-rules", 'association-insertion-method': 'append' } %>
            </div>
          </div>
        </div>
      </div>
      <div class="card__section" id="field-rules-container" <%= 'style="display: none;"'.html_safe if @segment.field_rules.empty? %>>
        <h4><b>Criteria</b></h4>
        <div id="field-rules">
          <%= f.simple_fields_for :field_rules, partial: 'field_rule' do |field| %>
            <%= render 'field_rule', f: field %>
          <% end %>
        </div>
      </div>
      <div class="card__section" id="order-rules-container" <%= 'style="display: none;"'.html_safe if @segment.order_rules.empty? %>>
        <h4><b>Order</b></h4>
        <div id="order-rules">
          <%= f.simple_fields_for :order_rules, partial: 'order_rule' do |field| %>
            <%= render 'order_rule', f: field %>
          <% end %>
        </div>
      </div>
      <div class="card__section" id="group-rules-container" <%= 'style="display: none;"'.html_safe if @segment.group_rules.empty? %>>
        <h4><b>Scopes</b></h4>
        <div id="group-rules">
          <%= f.simple_fields_for :group_rules, partial: 'group_rule' do |field| %>
            <%= render 'group_rule', f: field %>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <% unless @segment.new_record? %>
    <%= render 'members_table', source: segment_url(@segment, format: :json) %>
  <% end %>
<% end %>

<% unless @segment.new_record? %>
  <div class="sub_segments">
    <div class="content__header">
      <h1>Sub-<%= c_t(:segment).pluralize %></h1>
      <%= link_to "+ New Sub-#{ c_t(:segment)}", new_segment_sub_segment_path(@segment), class: "btn btn--primary" if SegmentPolicy.new(current_user, Segment).new? %>
    </div>

    <div class="content__main">
      <%= render "table" %>
    </div>
  </div>
<% end %>

<% unless @segment.new_record? %>
  <script>
    $(document).on('page:change', function() {
      $(document).off('page:change');

      var table = $('#segment-members-table').DataTable({
        pagingType: "full_numbers",
        dom: "frtpl",
        language: {
          search: "",
          searchPlaceholder: "Search..."
        },
        serverSide: true,
        ajax: { url: $(this).data('source'), type: 'GET', cache: false },
        order: []
      });

      // Datatables refuses to set ajax url without this
      table.ajax.url("<%= segment_url(@segment, format: :json) %>");
      table.ajax.reload();
    });
  </script>
<% end %>
<script>
  $(document).on('ready page:load', function() {
    $('#add_field_rule').click(function () {
      $('#field-rules-container').show();
    });

    $('#add_order_rule').click(function () {
      $('#order-rules-container').show();
    });

    $('#add_group_rule').click(function () {
      $('#group-rules-container').show();
    });


    $('#field-rules').on('cocoon:after-remove', function(e, removedItem) {
      if ($('#field-rules > div:visible').length <= 0)
        $('#field-rules-container').hide();
    });

    $('#order-rules').on('cocoon:after-remove', function(e, removedItem) {
      if ($('#order-rules > div:visible').length <= 0)
        $('#order-rules-container').hide();

    });

    $('#group-rules').on('cocoon:after-remove', function(e, removedItem) {
      if ($('#group-rules > div:visible').length <= 0)
        $('#group-rules-container').hide();
    });

    $('#group-rules').on('cocoon:after-insert', function() {
      setup_group_rule($('.group-rule').last());
    });
  });

  let group_rule_count = 0;

  $(document).on('ready page:change', function() {
    $('.group-rule').each(function (i) {
      setup_group_rule($(this));
    });
  });

  function setup_group_rule($group_rule) {
    // Set id for this new rule
    $($group_rule).attr('id', 'group-rule' + group_rule_count);

    // Load group selector
    $('body').prepend("<%= escape_javascript render partial: 'components/group_selector', locals: { id: 'group-scope-selector', multiselect: true } %>");
    group_selector = new GroupSelector($('#group-scope-selector'));

    let group_selector_id = "group-scope-selector" + group_rule_count;
    $('#group-scope-selector').attr("id", group_selector_id);

    $('#choose-groups-btn', $group_rule).attr("data-target", "#" + group_selector_id);
    $('#choose-groups-btn', $group_rule).attr("id", "choose-groups-btn" + group_rule_count);

    let $group_input = $('.group-input', $group_rule);
    $($group_input).select2();

    $('#' + group_selector_id).on('saveGroups', function(e, selectedGroups) {
      $($group_input).val(null);

      $.map(selectedGroups, function(group, key) {
        if ($($group_input).find("option[value='" + group.id + "']").length)
        {
          // If the list of selected items is an array, select it with the other options
          if ($.isArray($($group_input).val()))
            $($group_input).val($($group_input).val().concat(group.id));
          // If the list of the selected items is a single item, create an array with the old item and new item
          else if ($($group_input).val() != undefined && $($group_input).val() != null)
            $($group_input).val([$($group_input).val(), group.id]);
          // If the list of selected items is empty, create an array with the new item
          else
            $($group_input).val([group.id]);
        }
        // If the option doesn't exist, create it and start selected
        else
          $($group_input).append(new Option(group.text, group.id, false, true));
      });

      $($group_input).trigger('change');
    });

    group_rule_count += 1;
  }

  // Poll for status
//  setInterval(function() {
//    $.get("<%= segment_status_segment_path(@segment) %>", function(data) {
//      console.log(data);
//      console.log('hey friends');
//    })
//  }, 3000)
</script>
