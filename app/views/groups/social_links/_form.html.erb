<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  .grid-container {
    display: grid;
    grid-column-gap: 10px;
    grid-row-gap: 10px;
    grid-template-columns: auto auto auto auto;

    grid-template-areas:
      "header header header header";
  }

  .grid-item {
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 5px;
    font-size: 10px;
    text-align: center;
  }
  .grid-item-a {
    grid-area: header;
  }

  .overflow {
    overflow: visible;
  }

  .dropbtn {

  }

  .dropbtn:hover, .dropbtn:focus {
    background-color: #2980B9;
  }

  .dropdownclick {
    position: relative;
    display: inline-block;
  }

  .dropdownclick-content {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    min-width: 300px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    padding: 12px 16px;
    z-index: 1;
  }

  .dropdownclick-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
  }

  .dropdownclick a:hover {background-color: #ddd;}

  .show {display: block;}
</style>

<% def draw_urls(links) %>
  <div class="grid-container">
    <div class="grid-item-a">
      List of Valid URLS (* can be replaced with anything)
    </div>
    <% links.each do |name, provider| %>
      <div class="dropdownclick">
        <button class="btn btn-sm btn-primary btn-block grid-item dropbtn" onclick="showContent(<%= "\"#{name}\"" %>)">
          <%= inline_svg("icons/#{provider[:icon]}", class: "icon nav__icon") %>
          <%= name %>
        </button>
        <div id="<%= name %>" class="dropdownclick-content">
          <% provider[:links].each do |url| %>
            <strong>
              <%= url %>
            </strong>
          <% end %>
        </div>
      </div>
    <% end; nil %>
  </div>
<% end %>

<div class="content__main">
  <div class="card">
    <div class="card__section">
      <%= simple_form_for @social_link, url: group_social_links_path do |f| %>
        <%= f.input :url, label: "URL", input_html: { autofocus: true } %>
        <%#= f.association :segments, label: "#{c_t(:segment).pluralize}", collection: @group.enterprise.segments, input_html: { class: "select2-field-segments" } %>

        <%= f.simple_fields_for :news_feed_link, @social_link.news_feed_link do |nfl| %>
          <%= nfl.hidden_field :id, :value => nfl.object.id %>
          <%= nfl.hidden_field :news_feed_id, :value => @group.news_feed.id %>
          <%= nfl.association :segments, label: "#{c_t(:segment).pluralize}", collection: @group.enterprise.segments, input_html: { class: "select2-field-segments" } %>
          <% unless @social_link.news_feed_link.pending? %>
            <%= nfl.association :shared_news_feeds, label: 'Share with other ' + "#{c_t(:erg).pluralize}", label_method: lambda { |n| "#{n.group.name}" }, collection: NewsFeed.where(:group_id => @group.enterprise.groups.ids).where.not(:group_id => @group.id), input_html: { class: "select2" } %>
          <% end %>  
        <% end %>
        <%= f.button :submit %>
      <% end %>
    </div>
  </div>
  <div class="card overflow">
    <div class="card__section overflow">
      <% draw_urls(@links) if @links.present? %>
    </div>
  </div>
</div>

<%= render partial: 'shared/select2_ajax_search.js.erb' %>

<script>
  /* When the user clicks on the button,
  toggle between hiding and showing the dropdownclick content */
  function showContent(id) {
    var dropdownclicks = document.getElementsByClassName("dropdownclick-content");
    var i;
    for (i = 0; i < dropdownclicks.length; i++) {
      var opendropdownclick = dropdownclicks[i];
      if (opendropdownclick.classList.contains('show')) {
        opendropdownclick.classList.remove('show');
      }
    }
    document.getElementById(id).classList.toggle("show");
  }

  // Close the dropdownclick if the user clicks outside of it
  window.onclick = function(event) {
    if (!event.target.matches('.dropbtn') && !event.target.matches('.dropdownclick-content')) {
      var dropdownclicks = document.getElementsByClassName('dropdownclick-content');
      var i;
      for (i = 0; i < dropdownclicks.length; i++) {
        var opendropdownclick = dropdownclicks[i];
        if (opendropdownclick.classList.contains('show')) {
          opendropdownclick.classList.remove('show');
        }
      }
    }
  }
</script>
