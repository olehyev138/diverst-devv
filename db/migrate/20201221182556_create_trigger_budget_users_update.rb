# This migration was auto-generated via `rake db:generate_trigger_migration'.
# While you can edit this file, any changes you make to the definitions here
# will be undone by the next auto-generated trigger migration.

class CreateTriggerBudgetUsersUpdate < ActiveRecord::Migration[5.2]
  def up
    drop_trigger("budget_users_after_update_of_finished_expenses_row_tr", "budget_users", :generated => true)

    create_trigger("budget_users_after_update_of_finished_expenses_row_tr", :generated => true, :compatibility => 1).
        on("budget_users").
        after(:update).
        of(:finished_expenses) do
      "SET @budget_item_id = -1; SET @budget_id = -1; SET @annual_budget_id = -1; SELECT `budget_items`.`id`, `budget_items`.`budget_id`, `budgets`.`annual_budget_id` FROM `budget_items` INNER JOIN `budgets` ON `budgets`.`id` = `budget_items`.`budget_id` WHERE (`budget_items`.`id` = NEW.`budget_item_id`) INTO @budget_item_id, @budget_id, @annual_budget_id; SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0) FROM `budget_items_sums` WHERE (`budget_item_id` = @budget_item_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures; SET @spent = (SELECT `budget_users_sums`.`spent` FROM `budget_users_sums` WHERE (`budget_user_id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; REPLACE INTO budget_items_sums VALUES(@budget_item_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0)); SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SET @old_requested_amount = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0), IFNULL(requested_amount, 0) FROM `budgets_sums` WHERE (`budget_id` = @budget_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures, @old_requested_amount; SET @spent = (SELECT `budget_users_sums`.`spent` FROM `budget_users_sums` WHERE (`budget_user_id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; SET @new_requested_amount = @old_requested_amount; REPLACE INTO budgets_sums VALUES(@budget_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0), IFNULL(@new_requested_amount, 0)); SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SET @old_requested_amount = 0; SET @old_approved = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0), IFNULL(requested_amount, 0), IFNULL(approved, 0) FROM `annual_budgets_sums` WHERE (`annual_budget_id` = @annual_budget_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures, @old_requested_amount, @old_approved; SET @spent = (SELECT `budget_users_sums`.`spent` FROM `budget_users_sums` WHERE (`budget_user_id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; SET @new_requested_amount = @old_requested_amount; SET @new_approved = @old_approved; REPLACE INTO annual_budgets_sums VALUES(@annual_budget_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0), IFNULL(@new_requested_amount, 0), IFNULL(@new_approved, 0));"
    end
  end

  def down
    drop_trigger("budget_users_after_update_of_finished_expenses_row_tr", "budget_users", :generated => true)

    create_trigger("budget_users_after_update_of_finished_expenses_row_tr", :generated => true, :compatibility => 1).
        on("budget_users").
        after(:update).
        of(:finished_expenses) do
      "SET @budget_item_id = -1; SET @budget_id = -1; SET @annual_budget_id = -1; SELECT `budget_items`.`id`, `budget_items`.`budget_id`, `budgets`.`annual_budget_id` FROM `budget_items` INNER JOIN `budgets` ON `budgets`.`id` = `budget_items`.`budget_id` WHERE (`budget_items`.`id` = NEW.`budget_item_id`) INTO @budget_item_id, @budget_id, @annual_budget_id; SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0) FROM `budget_items_sums` WHERE (`budget_item_id` = @budget_item_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures; SET @spent = (SELECT COALESCE(`spent`, 0) as spent FROM `budget_users` LEFT OUTER JOIN `budget_users_sums` ON `budget_users_sums`.`budget_user_id` = `budget_users`.`id` WHERE (`id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; REPLACE INTO budget_items_sums VALUES(@budget_item_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0)); SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SET @old_requested_amount = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0), IFNULL(requested_amount, 0) FROM `budgets_sums` WHERE (`budget_id` = @budget_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures, @old_requested_amount; SET @spent = (SELECT COALESCE(`spent`, 0) as spent FROM `budget_users` LEFT OUTER JOIN `budget_users_sums` ON `budget_users_sums`.`budget_user_id` = `budget_users`.`id` WHERE (`id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; SET @new_requested_amount = @old_requested_amount; REPLACE INTO budgets_sums VALUES(@budget_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0), IFNULL(@new_requested_amount, 0)); SET @old_spent = 0; SET @old_reserved = 0; SET @old_user_estimates = 0; SET @old_finalized_expenditures = 0; SET @old_requested_amount = 0; SET @old_approved = 0; SELECT IFNULL(spent, 0), IFNULL(reserved, 0), IFNULL(user_estimates, 0), IFNULL(finalized_expenditures, 0), IFNULL(requested_amount, 0), IFNULL(approved, 0) FROM `annual_budgets_sums` WHERE (`annual_budget_id` = @annual_budget_id) INTO @old_spent, @old_reserved, @old_user_estimates, @old_finalized_expenditures, @old_requested_amount, @old_approved; SET @spent = (SELECT COALESCE(`spent`, 0) as spent FROM `budget_users` LEFT OUTER JOIN `budget_users_sums` ON `budget_users_sums`.`budget_user_id` = `budget_users`.`id` WHERE (`id` = OLD.`id`)); IF COALESCE(OLD.`finished_expenses`, FALSE) AND NOT COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved + OLD.`estimated` - @spent; SET @new_finalized_expenditures = @old_finalized_expenditures - @spent; ELSEIF NOT COALESCE(OLD.`finished_expenses`, FALSE) AND COALESCE(NEW.`finished_expenses`, FALSE) THEN SET @new_reserved = @old_reserved - OLD.`estimated` + @spent; SET @new_finalized_expenditures = @old_finalized_expenditures + @spent; END IF; SET @new_spent = @old_spent; SET @new_user_estimates = @old_user_estimates; SET @new_requested_amount = @old_requested_amount; SET @new_approved = @old_approved; REPLACE INTO annual_budgets_sums VALUES(@annual_budget_id, IFNULL(@new_spent, 0), IFNULL(@new_reserved, 0), IFNULL(@new_user_estimates, 0), IFNULL(@new_finalized_expenditures, 0), IFNULL(@new_requested_amount, 0), IFNULL(@new_approved, 0));"
    end
  end
end
